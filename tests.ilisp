(load "standard.ilisp")

(defn '(assert-eq) '(value expected)
  '(if (== value expected)
    '(true)
    '(error
       (concat
         "Value '"
         (str value)
         "' did not eq '"
         (str expected)
         "'"))))

; int
(assert-eq (type 1) "Number")
(assert-eq (+ 1 1) 2)
(assert-eq (- 1) -1)
(assert-eq (/ 5 2) 2)
(assert-eq (^ 5 2) 25)
(assert-eq (min 5 10) 5)
(assert-eq (max 5 10) 10)

; decimal
(assert-eq (type 1.1) "Decimal")
(assert-eq (type 10.1) "Decimal")
(assert-eq -1.1 -1.1)
(assert-eq (+ 1.1 1.1) 2.2)
(assert-eq (+ 1.1 1.1 2.2) 4.4)
(assert-eq (+ 1 1.1) 2.1)
(assert-eq (* 10 1.1) 11.0)
(assert-eq (/ 5.0 2) 2.5)
(assert-eq (^ 5.0 2) 25.0)
(assert-eq (min 5.0 10.0) 5.0)
(assert-eq (max 5.0 10.1) 10.1)
(assert-eq (== (+ 13 0.2 0.2 0.1) (- 14 0.2 0.2 0.1)) 1)

; str
(assert-eq (str join) "")
(assert-eq (str 0) "0")
(assert-eq (str 1.1) "1.1")
(assert-eq (str 1.111) "1.111")
;; (assert-eq (str 1.1015510001) "1.1015510001") ;

; not
(assert-eq (not 1) 0)
(assert-eq (not 0) 1)
(assert-eq (not "") 1)
(assert-eq (not "a") 0)
(assert-eq (not 0.0) 0)
(assert-eq (not 0.1) 1)
(assert-eq (not '()) 1)

(defn '(zero-arity-fn) '()
  '(1))

; Calling fn with zero arity
(assert-eq (zero-arity-fn ()) 1)
(assert-eq (zero-arity-fn '()) 1)
(assert-eq (type (zero-arity-fn ())) "Number")
(assert-eq (type (zero-arity-fn)) "Function")

; len
(assert-eq (len "hello") 5)
(assert-eq (len '(1 2 3)) 3)
(assert-eq (len (list 1 2 3)) 3)
